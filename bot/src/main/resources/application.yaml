app:
  telegram-token: ${TELEGRAM_TOKEN}

spring:
  application:
    name: Bot
  liquibase:
    enabled: false
  jpa:
    hibernate:
      ddl-auto: validate
    open-in-view: false

  caching: true

  redis:
    host: localhost
    port: 6379

  kafka:
    bootstrap-servers: localhost:29092
    consumer:
      group-id: scrapper-link-update-consumers
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer

      properties:
        spring.json.use.type.headers: false
        spring.json.value.default.type: backend.academy.bot.dto.IncomingUpdate
        spring.json.trusted.packages: java.util,java.lang,backend.academy.bot.dto
        spring.json.ignore.unknown.tokens: true

    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

    topics:
      link-update:
        name: "link-updates-topic"
      link-update-dlq:
        name: link-updates.DLQ

    listener:
      errorHandler: method

domains:
  scrapper: "http://localhost:8081"

messaging:
  message-transport: Kafka # HTTP \ Kafka

resilience4j:
  circuitbreaker:
    instances:
      scrapperCircuitBreaker:
        slidingWindowSize: 10
        minimumRequiredCalls: 5
        failureRateThreshold: 50
        permittedCallsInHalfOpenState: 1
        waitDurationInOpenState: "1s"
        slidingWindowType: COUNT_BASED

  retry:
    instances:
      scrapperRetry:
        maxRetryAttempts: 3
        waitDuration: 100ms

  ratelimiter:
    instances:
      scrapperRateLimiter:
        limitForPeriod: 10
        limitRefreshPeriod: 1s
        timeoutDuration: 0ms


server:
  port: 8080

springdoc:
  swagger-ui:
    enabled: true
    path: /swagger-ui

logging:
  level:
    root: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
